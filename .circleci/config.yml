version: 2.1

commands:
     
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID 2.
    parameters:   
      workflow_id:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string

    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow..
    parameters:
      # Add parameter here
      workflow_id:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            # SUCCESS=$(curl --insecure "https://kvdb.io/4EVKmUVPCSbndmjwqVZLtZ/migration_<<parameters.workflow_id>>")
            # if(( $SUCCESS==1 )); 
            # then
            cd ~/project/backend
            npm install
            npm run build
            npm run migrations:revert
            # fi          

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |  
            cd frontend
            npm install
            npm run build

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |   
            cd backend
            npm install 
            npm run build     

      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Frontend test 
          command: | 
            cd frontend 
            npm install
            npm run test
        
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]   
      - run: 
          name: Backend test
          command: |
            cd backend
            npm install
            npm run test         
    

  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Scan-Frontend
          command: |
            cd frontend
            npm install
            npm install webpack
            npm audit fix --audit-level=critical 
    
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan-Backend
          command: |        
            cd backend
            npm install
            npm audit fix --audit-level=critical 
            # npm audit fix --force
       
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip npm jq
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"      
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"          
      - run:
          name: Add back-end ip to ansible inventory.
          command: |
            aws ec2 describe-instances \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --filters "Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> ~/project/.circleci/ansible/inventory.txt 
            cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ['e8:76:87:b3:6d:72:61:0b:89:db:75:cc:07:7d:f9:ce']
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip ansible aws-cli   
      - run:
          name: Configure server
          command: |
            echo NODE_ENV=production > ~/project/backend/.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ~/project/backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ~/project/backend/.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ~/project/backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> ~/project/backend/.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ~/project/backend/.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ~/project/backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ~/project/backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> ~/project/backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ~/project/backend/.env
            cat ~/project/backend/.env

            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - persist_to_workspace:
          root: ~/
          paths: 
            - project/backend      
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install AWS CLI dependencies
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install    
      - run:
          name: Run migrations
          command: |
            cd backend 
            npm install 
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
            
            
      - run:
          name: Send migration results to kvdb2
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then 
              curl --insecure https://VETie5rEZzX1CVL3cxCNmQ/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
       - image: python:3.10-alpine3.16

    steps:
      # Checkout code from git
      - checkout 
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm aws-cli ansible curl 
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo "API_URL=http://${BACKEND_IP}:3030" >> frontend/.env
            echo ENVIRONMENT=production >> "frontend/.env"
            echo NODE_ENV=production >> "frontend/.env"
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend 
            cat .env 
            npm install 
            npm install webpack -g 
            npm install -D webpack-cli 
            npm run build  
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}  --recursive  

      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys: 
          fingerprints: ['e8:76:87:b3:6d:72:61:0b:89:db:75:cc:07:7d:f9:ce']
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip openssh curl ansible nodejs npm aws-cli
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install 
            # npm install typescript@latest -g 
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
            cd .circleci/ansible
            echo "Contents of the inventory.txt file is -----"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   

  smoke-test:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache aws-cli curl tar gzip nodejs npm
      - run:
          name: Backend smoke test 3
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            sleep 5m
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test12.
          command: |
            export URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl  ${URL} | grep "Welcome" 
            then
              return 0
            else
              return 1
            fi               
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      - image: amazon/aws-cli 
    steps:
      - checkout 
      - run:
          name: Install dependencies
          command: |
            yum install -y gzip tar npm nodejs
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports \
            --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo $OldWorkflowID >> ~/OldWorkflowID.txt
            cat ~/OldWorkflowID.txt
          
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=udapeople
            echo OldWorkflowID=${OldWorkflowID}
            echo Current Workflow ID: ${CIRCLE_WORKFLOW_ID:0:7} 
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
           export OldWorkflowID=$(aws cloudformation \
                          list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                          --no-paginate --output text) 
           
            echo Old Workflow ID: $OldWorkflowID      
            
            if [[ "${OldWorkflowID}" =~ "${STACKS[@]}" ]]
            then
              echo "----------------Delete Confirmed--------------"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
              echo "-----------Cannot Cleanup-------------"
            fi    

  add-prometheus-node-exporter:
    docker:
      - image: python:3.10-alpine3.16 
    steps:
      - checkout
      - add_ssh_keys: 
          fingerprints: ['e8:76:87:b3:6d:72:61:0b:89:db:75:cc:07:7d:f9:ce']    
      - restore_cache:
          keys: [backend-build]    
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: | 
            apk add --update tar gzip ansible nodejs npm aws-cli
      - run: 
          name: Setup prometheus node exporter 
          command: | 
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt node-exporter.yml     
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}             

workflows:
  default:
    jobs:
      - build-frontend      
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]    
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]  
      - configure-infrastructure:
          requires: [deploy-infrastructure]  
      - run-migrations:
          requires: [configure-infrastructure]  
      # - deploy-frontend:
      #     requires: [run-migrations]      
      # - deploy-backend:
      #     requires: [run-migrations]    
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]    
      # - add-prometheus-node-exporter:
      #     requires: [smoke-test]    
      # - cleanup:
      #     requires: [add-prometheus-node-exporter, cloudfront-update]    
        